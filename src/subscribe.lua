--[[
    Lua Cold Observables
	
    MIT License
    Copyright (c) 2019 Alexis Munsayac
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]

local function emptyHandler()
end

return function (observable, onNext, onError, onComplete)
	--[[
		Represents the availability of the subscription
	]]
	local closeState = false
	--[[
		The attached subscriber handler
	]]
	local subscriber = observable.subscriber
	--[[
		cleanup function 
	]]
	local cleanup = emptyHandler
	--[[
		Check if the observable has a subscriber
	]]
	if(subscriber) then 
		--[[
			Execute subscriber
		]]
		local status, result = pcall(function ()
			return subscriber(
				--[[
					Receives the emitted values
				]]
				function (...)
					if(not closeState) then 
						if(type(onNext) == "function") then
							onNext(...) 
						end
					end
				end,
				--[[
					Receives the error
				]]
				function (...)
					if(not closeState) then 
						closeState = true 
						if(type(onError) == "function") then
							onError(...)
						end
						cleanup()
					end
				end,
				--[[
					Receives the completion
				]]
				function ()
					if(not closeState) then 
						closeState = true 
						if(type(onComplete) == "function") then
							onComplete()
						end
						cleanup()
					end
				end,
				--[[
					Defines if the subscription has been closed
				]]
				function ()
					return closeState
				end
			)
		end)
		--[[
			Get the cleanup function generated by the subscriber
		]]
		if(status) then 
			cleanup = result 
		else 
			closeState = true
			if(type(onError) == "function") then
				onError(result)
			end
		end
	end 

	return function ()
		if(not closeState) then 
			closeState = true 
			cleanup()
		end
	end
end 